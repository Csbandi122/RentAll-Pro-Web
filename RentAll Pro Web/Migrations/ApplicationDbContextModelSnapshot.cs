// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentAll_Pro_web.Data;

#nullable disable

namespace RentAll_Pro_Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Available")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DeviceTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Picture")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("RentCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("RentPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.DeviceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DeviceTypes");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.Financial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntryType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SourceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TicketNr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Financials");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.FinancialDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FinancialId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("FinancialId");

                    b.ToTable("FinancialDevices");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("Contract")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ContractEmailSent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Invoice")
                        .HasColumnType("TEXT");

                    b.Property<bool>("InvoiceEmailSent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RentStart")
                        .HasColumnType("TEXT");

                    b.Property<int>("RentalDays")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReviewEmailSent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TicketNr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.RentalDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RentalId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("RentalId");

                    b.ToTable("RentalDevices");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CostAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Technician")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TicketNr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.ServiceDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceDevices");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AszfFile")
                        .HasColumnType("TEXT");

                    b.Property<string>("CcAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyLogo")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContractEmailTemplate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DefaultRentalDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmailPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailSmtp")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailSubject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GoogleReview")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceXml")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewEmailSubject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewEmailTemplate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TemplateContract")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.Device", b =>
                {
                    b.HasOne("RentAll_Pro_web.Data.Models.DeviceType", "DeviceType")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceType");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.FinancialDevice", b =>
                {
                    b.HasOne("RentAll_Pro_web.Data.Models.Device", "Device")
                        .WithMany("FinancialDevices")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentAll_Pro_web.Data.Models.Financial", "Financial")
                        .WithMany("FinancialDevices")
                        .HasForeignKey("FinancialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Financial");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.Rental", b =>
                {
                    b.HasOne("RentAll_Pro_web.Data.Models.Customer", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.RentalDevice", b =>
                {
                    b.HasOne("RentAll_Pro_web.Data.Models.Device", "Device")
                        .WithMany("RentalDevices")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentAll_Pro_web.Data.Models.Rental", "Rental")
                        .WithMany("RentalDevices")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.ServiceDevice", b =>
                {
                    b.HasOne("RentAll_Pro_web.Data.Models.Device", "Device")
                        .WithMany("ServiceDevices")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentAll_Pro_web.Data.Models.Service", "Service")
                        .WithMany("ServiceDevices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.Customer", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.Device", b =>
                {
                    b.Navigation("FinancialDevices");

                    b.Navigation("RentalDevices");

                    b.Navigation("ServiceDevices");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.DeviceType", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.Financial", b =>
                {
                    b.Navigation("FinancialDevices");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.Rental", b =>
                {
                    b.Navigation("RentalDevices");
                });

            modelBuilder.Entity("RentAll_Pro_web.Data.Models.Service", b =>
                {
                    b.Navigation("ServiceDevices");
                });
#pragma warning restore 612, 618
        }
    }
}
